{"meta":{"title":"好好学习，天天摸鱼","subtitle":"摸鱼使我精疲力尽","description":"这是一个日常划水的辣鸡前端博客","author":"咸鱼蔡小胖","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"初识webpack@4.0","slug":"初识webpack-4-0","date":"2018-06-24T09:17:28.000Z","updated":"2018-06-24T09:49:48.243Z","comments":true,"path":"2018/06/24/初识webpack-4-0/","link":"","permalink":"http://yoursite.com/2018/06/24/初识webpack-4-0/","excerpt":"","text":"webpack webpack 是一个现代 JavaScript应用程序的静态模块打包器，当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。 webpack的四个核心概念入口(entry)入口起点标明了webpack应该使用哪个模块，从哪个文件作为构建依赖包的开始可以在webpack.config.js中的entry配置简单入口123module.exports = &#123; entry: &apos;./path/to/my/entry/file.js&apos;&#125;; 当然也可以传入一个数组，这会创建多个主入口 出口(output)出口指明webpack在哪里输出他所创建的bundles，以及如何对文件命名，默认值为./dist123456789const path = require(&apos;path&apos;);module.exports = &#123; entry: &apos;./path/to/my/entry/file.js&apos;, output: &#123; path: path.resolve(__dirname, &apos;dist&apos;), filename: &apos;my-first-webpack.bundle.js&apos; &#125;&#125;; 上面的代码简单的表示了output的作用，通过path,filename对输出的文件进行路径以及名称的设置 loaderloader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。所以可以通过引入各种loader实现我们打包不同类型文件的目的1234567891011121314const path = require(&apos;path&apos;);const config = &#123; output: &#123; filename: &apos;my-first-webpack.bundle.js&apos; &#125;, module: &#123; rules: [ &#123; test: /\\.txt$/, use: &apos;raw-loader&apos; &#125; ] &#125;&#125;;module.exports = config; 上述代码即表示了loader的两个重要属性值 test: 用于标识出应该被对应的 loader 进行转换的某个或某些文件 use: 用于转换时，确定使用哪种loader 插件(plugins)loader被用来转换各类模块，而插件能实现更强大、范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。12345678910111213141516const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;); // 通过 npm 安装const webpack = require(&apos;webpack&apos;); // 用于访问内置插件const config = &#123; module: &#123; rules: [ &#123; test: /\\.txt$/, use: &apos;raw-loader&apos; &#125; ] &#125;, plugins: [ new webpack.optimize.UglifyJsPlugin(), new HtmlWebpackPlugin(&#123;template: &apos;./src/index.html&apos;&#125;) ]&#125;;module.exports = config; 插件的功能很强大，而能被使用的插件种类也很丰富，许多开箱即用的插件都在插件列表中可以看到。","categories":[],"tags":[{"name":"前端工具","slug":"前端工具","permalink":"http://yoursite.com/tags/前端工具/"},{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/tags/webpack/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-06-23T13:29:15.001Z","updated":"2018-06-23T13:29:15.002Z","comments":true,"path":"2018/06/23/hello-world/","link":"","permalink":"http://yoursite.com/2018/06/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}